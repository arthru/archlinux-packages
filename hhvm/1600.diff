diff --git a/hphp/runtime/ext/reflection/ext_reflection-classes.php b/hphp/runtime/ext/reflection/ext_reflection-classes.php
index dbaea2a..c925dc1 100644
--- a/hphp/runtime/ext/reflection/ext_reflection-classes.php
+++ b/hphp/runtime/ext/reflection/ext_reflection-classes.php
@@ -71,7 +71,9 @@ public function __construct($func, $param) {
       return;
     }
 
-    if (is_string($func)) {
+    if ($func instanceof Closure) {
+      $params = (new ReflectionFunction($func))->getParameters();
+    } else if (is_string($func)) {
       $double_colon = strpos($func, "::");
       if ($double_colon === false) {
         $params = (new ReflectionFunction($func))->getParameters();
@@ -88,20 +90,25 @@ public function __construct($func, $param) {
       );
     }
 
-    if (is_string($param)) {
+    if (is_int($param)) {
+      if (!isset($params[$param])) {
+        throw new ReflectionException("The parameter specified by its offset #$param could not be found");
+      }
+      $p = $params[$param];
+      $this->info = $p->info;
+      $this->name = $p->name;
+    } else {
+      $name = (string)$param;
       foreach ($params as $p) {
-        if ($p->name === $param) {
+        if ($p->name === $name) {
           $this->info = $p->info;
           $this->name = $p->name;
           break;
         }
       }
-    } else if (is_int($param) && $param < count($params)) {
-      $p = $params[$param];
-      $this->info = $p->info;
-      $this->name = $p->name;
-    } else {
-      throw new Exception("No param named $param found");
+      if (!isset($this->info)) {
+        throw new ReflectionException("The parameter specified by its name '$name' could not be found");
+      }
     }
   }
 
@@ -122,6 +129,9 @@ public function __toString() {
       }
       $type .= ' ';
     }
+    if (isset($this->info['ref'])) {
+      $type .= '&';
+    }
     $out = 'Parameter #'.$this->getPosition().' [ ';
     if ($this->isOptional()) {
       $default = var_export($this->getDefaultValue(), true);
@@ -186,6 +196,23 @@ public function isPassedByReference() {
     return isset($this->info['ref']);
   }
 
+
+  // This doc comment block generated by idl/sysdoc.php
+  /**
+   * ( excerpt from
+   * http://php.net/manual/de/reflectionparameter.canbepassedbyvalue.php ) 
+   *
+   * Returns whether this parameter can be passed by value. Warning: This
+   * function is currently not documented; only its argument list is
+   * available.
+   *
+   * @return     mixed   Returns TRUE if the parameter can be passed by value, 
+   *                     FALSE otherwise. Returns NULL in case of an error.  
+   */
+  public function canBePassedByValue() {
+    return !isset($this->info['ref']);
+  }
+
   // This doc comment block generated by idl/sysdoc.php
   /**
    * ( excerpt from
@@ -235,7 +262,14 @@ public function getClass() {
       return null;
     }
     $ltype = strtolower($this->info['type']);
-    if (hphp_scalar_typehints_enabled()) {
+
+    if ($ltype === 'array') {
+      return null;
+    } else if ($ltype === 'self') {
+      return new ReflectionClass($this->info['class']);
+    } else if ($ltype === 'parent') {
+      return new ReflectionClass(get_parent_class($this->info['class']));
+    } else if (hphp_scalar_typehints_enabled() || $this->getDeclaringFunction()->isInternal()) {
       $nonClassTypehints = array(
         'bool' => 1,
         'boolean' => 1,
@@ -250,8 +284,6 @@ public function getClass() {
       if (isset($nonClassTypehints[$ltype])) {
         return null;
       }
-    } else if ($ltype === 'array') {
-      return null;
     }
     return new ReflectionClass($this->info['type']);
   }
@@ -332,6 +364,37 @@ public function isDefaultValueAvailable() {
   // This doc comment block generated by idl/sysdoc.php
   /**
    * ( excerpt from
+   * http://php.net/manual/en/reflectionparameter.isdefaultvalueconstant.php )
+   *
+   * Returns whether the default value of this parameter is constant. Warning: This
+   * function is currently not documented; only its argument list is
+   * available.
+   *
+   * @return     mixed   Returns TRUE if the default value is constant, FALSE
+   *                     if it is not or NULL on failure.
+   */
+  public function isDefaultValueConstant() {
+    if (!$this->isOptional()) {
+      throw new ReflectionException('Parameter is not optional');
+    }
+
+    // Sort of a hack: "Parse" the defaultText, excluding known values from
+    // being constants.
+    $default = $this->info['defaultText'];
+    return !( 
+      $default == 'NULL' ||                  // NULL
+      $default == 'false' ||                 // bool
+      $default == 'true' ||                  // bool
+      $default[0] == '"' ||                  // dq-string
+      $default[0] == "'" ||                  // sq-string
+      strncmp($default, 'array', 5) == 0 ||  // an array
+      strspn($default, '-0123456789') > 0    // a number
+    );
+  }
+
+  // This doc comment block generated by idl/sysdoc.php
+  /**
+   * ( excerpt from
    * http://php.net/manual/en/reflectionparameter.getdefaultvalue.php )
    *
    * Gets the default value of the parameter for a user-defined function or
@@ -355,7 +418,7 @@ public function getDefaultValue() {
     * @deprecated
     */
   public function getDefaultValueText() {
-    return $this->getDefaultValueConstantName();
+    return $this->isOptional() ? $this->info['defaultText'] : '';
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -370,10 +433,38 @@ public function getDefaultValueText() {
    * @return     mixed   Returns string on success or NULL on failure.
    */
   public function getDefaultValueConstantName() {
-    if (isset($this->info['defaultText'])) {
-      return $this->info['defaultText'];
+    if (!$this->isOptional()) {
+      throw new ReflectionException('Parameter is not optional');
     }
-    return '';
+
+    // Sort of a hack: "Parse" the defaultText, excluding known values from
+    // being constants.
+    $default = $this->info['defaultText'];
+    if (
+      $default == 'NULL' ||                  // NULL
+      $default == 'false' ||                 // bool
+      $default == 'true' ||                  // bool
+      $default[0] == '"' ||                  // dq-string
+      $default[0] == "'" ||                  // sq-string
+      strncmp($default, 'array', 5) == 0 ||  // an array
+      strspn($default, '-0123456789') > 0    // a number
+    ) return null;
+
+    // Now we either have "Fixture::CONSTANT", or "CONSTANT". The first is
+    // not ambiguous, while the latter is, and may either be a namespace or
+    // a global constant
+    if (strstr($default, '::')) {
+      return $default;
+    }
+
+    $pos = strrpos($this->info['function'], '\\');
+    if ($pos) {
+      $namespace = substr($this->info['function'], 0, $pos + 1);
+      if (defined($namespace.$default)) {
+        return $namespace.$default;
+      }
+    }
+    return $default;
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -432,6 +523,11 @@ public function isCallable() {
     return $this->getTypeText() === 'callable';
   }
 
+  // Prevent cloning
+  public function __clone() {
+    throw new BadMethodCallException('Trying to clone an uncloneable object of class ReflectionParameter');
+  }
+
   private static function collectAttributes(&$attrs, $class, $function_name,
                                             $index) {
     if ($class->hasMethod($function_name)) {
@@ -465,6 +561,15 @@ private static function collectAttributes(&$attrs, $class, $function_name,
  */
 class ReflectionFunctionAbstract {
   public $info;
+  public $name;
+
+  /**
+   * Create a new ReflectionFunctionAbstract and set the name
+   */
+  public function __construct($info) {
+    $this->info= $info;
+    $this->name= $info['name'];
+  }
 
   // This doc comment block generated by idl/sysdoc.php
   /**
@@ -520,6 +625,19 @@ public function getShortName() {
   // This doc comment block generated by idl/sysdoc.php
   /**
    * ( excerpt from
+   * http://php.net/manual/en/reflectionfunctionabstract.isdeprecated.php ) 
+   *
+   * Checks whether the function is deprecated.  
+   *
+   * @return     mixed  TRUE if it's deprecated, otherwise FALSE  
+   */
+  public function isDeprecated() {
+    return false; // TODO
+  }
+
+  // This doc comment block generated by idl/sysdoc.php
+  /**
+   * ( excerpt from
    * http://php.net/manual/en/reflectionfunctionabstract.isinternal.php )
    *
    * Checks whether the function is internal, as opposed to user-defined.
@@ -684,10 +802,20 @@ public function returnsReference() {
    */
   public function getParameters() {
     $ret = array();
+
+    // Search for last required parameter
+    $numRequired = -1;
+    foreach ($this->info['params'] as $name => $info) {
+      if (!isset($info['defaultText'])) $numRequired = $info['index'];
+    }
+
     foreach ($this->info['params'] as $name => $info) {
       $param = new ReflectionParameter(null, null);
       $param->info = $info;
       $param->name = $info['name'];
+      if ($info['index'] <= $numRequired) {
+        unset($param->info['defaultText'], $param->info['default']);
+      }
       $ret[] = $param;
     }
     return $ret;
@@ -733,6 +861,33 @@ public function getNumberOfRequiredParameters() {
     return $count;
   }
 
+  // This doc comment block generated by idl/sysdoc.php
+  /**
+   * ( excerpt from http://php.net/manual/en/reflectionfunctionabstract.getextension.php
+   * )
+   *
+   * Get the extension information of a function. 
+   *
+   * @return     mixed   The extension information, as a ReflectionExtension object. 
+   */
+  public function getExtension() {
+    return null; // TODO
+  }
+
+  // This doc comment block generated by idl/sysdoc.php
+  /**
+   * ( excerpt from
+   * http://php.net/manual/en/reflectionclass.reflectionfunctionabstract.php )
+   *
+   * Gets extension name.
+   *
+   * @return     mixed   The extensions name. 
+   */
+  public function getExtensionName() {
+    $ext = null; // TODO 
+    return $ext ? $ext->getName() : false;
+  }
+
   public function getReturnTypeText() {
     if (isset($this->info['return_type'])) {
       return $this->info['return_type'];
@@ -746,6 +901,11 @@ public function getClosureScopeClass() {
     }
     return null;
   }
+
+  // Prevent cloning
+  public function __clone() {
+    throw new BadMethodCallException('Trying to clone an uncloneable object of class '.get_class($this)); 
+  }
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -775,13 +935,14 @@ class ReflectionFunction extends ReflectionFunctionAbstract
    */
   public function __construct($name) {
     if ($name instanceof Closure) {
-      $this->info = hphp_get_closure_info($name);
+      $info = hphp_get_closure_info($name);
     } else {
-      $this->info = hphp_get_function_info($name);
-      if (empty($this->info)) {
+      $info = hphp_get_function_info($name);
+      if (empty($info)) {
         throw new ReflectionException("Function $name does not exist");
       }
     }
+    parent::__construct($info);
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -791,12 +952,54 @@ public function __construct($name) {
    *
    * To string.
    *
+   * @see _function_string in php://./ext/reflection/php_reflection.c
    * @return     mixed   Returns ReflectionFunction::export()-like output for
    *                     the function.
    */
   public function __toString() {
-    //TODO
-    return "";
+    $ref = isset($this->info['ref']) ? '&' : '';
+    $type = $this->info['is_closure'] ? 'Closure' : 'Function';
+    if ($this->info['doc'] === false) {
+      $ret = '';
+    } else {
+      $ret = $this->info['doc']."\n";
+    }
+
+    // Header
+    if (isset($this->info['internal'])) {
+      $ret .= "{$type} [ <internal> function {$ref}{$this->name} ] {\n";
+    } else {
+      $ret .= sprintf(
+        "%s [ <user> function %s%s ] {\n  @@ %s %d - %d\n",
+        $type,
+        $ref,
+        $this->name,
+        $this->info['file'],
+        $this->info['line1'],
+        $this->info['line2']
+      );
+    }
+
+    // Parameters
+    if (!empty($this->info['params'])) {
+      $ret .= "\n  - Parameters [".count($this->info['params'])."] {\n";
+      foreach ($this->getParameters() as $_) {
+        $ret .= "    $_\n";
+      }
+      $ret .= "  }\n";
+    }
+
+    // Closures: Bound variables
+    if ($this->info['is_closure'] && !empty($this->info['static_variables'])) {
+      $ret .= "\n  - Bound Variables [".count($this->info['static_variables'])."] {\n";
+      $i = 0;
+      foreach ($this->info['static_variables'] as $name => $value) {
+        $ret .= "    Variable #".($i++)." [ \$$name ]\n";
+      }
+      $ret .= "  }\n"; 
+    }
+
+    return $ret."}\n";
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -862,6 +1065,19 @@ public function invokeArgs($args) {
     return hphp_invoke($this->info['name'], array_values($args));
   }
 
+  // This doc comment block generated by idl/sysdoc.php
+  /**
+   * ( excerpt from http://de3.php.net/manual/de/reflectionfunctionabstract.innamespace.php
+   * )
+   *
+   * Checks if this class is defined in a namespace.
+   *
+   * @return     mixed   Returns TRUE on success or FALSE on failure.
+   */
+  public function inNamespace() {
+    return strrpos($this->name, '\\') !== false;
+  }
+
   public function getAttribute($name) {
     $attrs = $this->info['attributes'];
     return isset($attrs[$name]) ? $attrs[$name] : null;
@@ -1019,7 +1235,70 @@ private function normalizeNS($ns) {
    *                     instance.
    */
   public function __toString() {
-    return "";
+    $kind = $this->isInternal() ? 'internal' : 'user';
+    if ($this->check('interface')) {
+      $type = 'Interface';
+    } else if ($this->check('trait')) {
+      $type = 'Trait';
+    } else {
+      $type = 'Class';
+    }
+
+    // Header
+    $ret = sprintf(
+      "%s [ <%s> %s %s ] {\n  @@ %s %d-%d\n",
+      $type,
+      $kind,
+      strtolower($type),
+      $this->name,
+      $this->fetch('file'),
+      $this->fetch('line1'),
+      $this->fetch('line2')
+    );
+
+    // Constants
+    $constants = $this->fetch('constants');
+    $ret .= "\n  - Constants [".count($constants)."] {\n";
+    foreach ($constants as $name => $value) {
+      $ret .= "    Constant [ ".strtolower(gettype($value))." $name ] { $value }\n";
+    }
+    $ret .= "  }\n";
+
+    // Split properties and methods into statics and instance members
+    $properties = array(false => array(), true => array()); 
+    foreach ($this->getProperties() as $_) {
+      $properties[$_->isStatic()][] = $_; 
+    }
+    $methods = array(false => array(), true => array());
+    foreach ($this->getMethods() as $_) {
+      $methods[$_->isStatic()][] = $_;
+    }
+
+    $ret .= "\n  - Static properties [".count($properties[true])."] {\n";
+    foreach ($properties[true] as $_) {
+      $ret .= "    ".$_;
+    }
+    $ret .= "  }\n";
+
+    $ret .= "\n  - Static methods [".count($methods[true])."] {\n";
+    foreach ($methods[true] as $_) {
+      $ret .= "    ".rtrim(str_replace("\n", "\n    ", $_), ' ');
+    }
+    $ret .= "  }\n";
+
+    $ret .= "\n  - Properties [".count($properties[false])."] {\n";
+    foreach ($properties[false] as $_) {
+      $ret .= "    ".$_;
+    }
+    $ret .= "  }\n";
+
+    $ret .= "\n  - Methods [".count($methods[false])."] {\n";
+    foreach ($methods[false] as $_) {
+      $ret .= "    ".rtrim(str_replace("\n", "\n    ", $_), ' ');
+    }
+    $ret .= "  }\n";
+
+    return $ret."}\n";
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -1100,6 +1379,27 @@ public function isInstantiable() {
 
   // This doc comment block generated by idl/sysdoc.php
   /**
+   * ( excerpt from
+   * http://php.net/manual/en/reflectionclass.iscloneable.php )
+   *
+   * Returns whether this class is cloneable. 
+   *
+   * @return     mixed   Returns TRUE if the class is cloneable, FALSE otherwise.  
+   */
+  public function isCloneable() {
+    if (!$this->isInstantiable()) {
+      return false;
+    }
+    $clone = hphp_get_method_info($this->name, '__clone');
+    if (empty($clone)) {
+      return true;
+    }
+    return $clone['access'] == "public"; 
+  }
+
+
+  // This doc comment block generated by idl/sysdoc.php
+  /**
    * ( excerpt from http://php.net/manual/en/reflectionclass.hasconstant.php
    * )
    *
@@ -1376,8 +1676,14 @@ public function getConstants() {
   public function getConstant($name) {
     $constants = $this->fetch('constants');
     if (!isset($constants[$name])) {
-      $class = $this->info['name'];
-      throw new ReflectionException("Class constant $class::$name does not exist");
+
+      // This sucks: PHP returns false instead of throwing an exception, which would
+      // be better, and we'd be able to distinguish here from the case where a class
+      // constant carries the value FALSE. Nevertheless, be compliant.
+      //
+      // $class = $this->info['name'];
+      // throw new ReflectionException("Class constant $class::$name does not exist");
+      return false;
     }
     return $constants[$name];
   }
@@ -1511,7 +1817,7 @@ public function isInterface() {
    * @return     mixed   Returns TRUE on success or FALSE on failure.
    */
   public function isAbstract() {
-    return $this->check('abstract');
+    return $this->check('abstract') || $this->check('trait');
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -1805,7 +2111,7 @@ public function implementsInterface($cls) {
    *                     user-defined classes.
    */
   public function getExtension() {
-    return $this->fetch('extension');
+    return $this->check('internal') ? $this->fetch('extension') : null;
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -1819,7 +2125,8 @@ public function getExtension() {
    *                     or FALSE for user-defined classes.
    */
   public function getExtensionName() {
-    return $this->fetch('extension')->getName();
+    $ext = $this->fetch('extension');
+    return $ext ? $ext->getName() : false;
   }
 
   public function getAttribute($name) {
@@ -1888,6 +2195,10 @@ public function getShortName() {
     return substr($this->getName(), $pos + 1);
   }
 
+  // Prevent cloning
+  public function __clone() {
+    throw new BadMethodCallException('Trying to clone an uncloneable object of class ReflectionClass');
+  }
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -1987,7 +2298,14 @@ public function __construct($cls, $name) {
    *
    */
   public function __toString() {
-    return "";
+    return 
+      'Property [ '.
+      (isset($this->info['static']) || !$this->info['default'] ? '' : '<default> ').
+      implode(' ', Reflection::getModifierNames($this->info['modifiers'])).
+      ' $'.
+      $this->name.
+      " ]\n"
+    ;
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -2093,7 +2411,7 @@ public function isStatic() {
    *                     or FALSE if it was created at run-time.
    */
   public function isDefault() {
-    return $this->info['default'];
+    return isset($this->info['default']);
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -2254,6 +2572,11 @@ public function getTypeText() {
     }
     return '';
   }
+
+  // Prevent cloning
+  public function __clone() {
+    throw new BadMethodCallException('Trying to clone an uncloneable object of class ReflectionProperty');
+  }
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -2275,7 +2598,6 @@ class ReflectionMethod extends ReflectionFunctionAbstract
   const IS_ABSTRACT = 2;
   const IS_FINAL = 4;
 
-  public $name;
   public $class;
   public $originalClass;
 
@@ -2309,14 +2631,11 @@ public function __construct($cls, $name = '') {
     $method = hphp_get_method_info($cls, $name);
     $this->originalClass = is_object($cls) ? get_class($cls) : $cls;
     if (!$method) {
-      $classname = is_object($cls) ? get_class($cls) : $cls;
-      throw new ReflectionException(
-        "Method $this->originalClass::$name does not exist");
+      throw new ReflectionException("Method $this->originalClass::$name does not exist");
     }
 
-    $this->info  = $method;
-    $this->name  = $method['name'];
     $this->class = $method['class'];
+    parent::__construct($method);
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -2329,8 +2648,41 @@ public function __construct($cls, $name = '') {
    *                     instance.
    */
   public function __toString() {
-    //TODO
-    return "";
+    $ref = isset($this->info['ref']) ? '&' : '';
+    if ($this->info['doc'] === false) {
+      $ret = '';
+    } else {
+      $ret = $this->info['doc']."\n";
+    }
+
+    // Header
+    if (isset($this->info['internal'])) {
+      $ret .= "Method [ <internal> method {$ref}{$this->name} ] {\n";
+    } else {
+      $ret .= sprintf(
+        "Method [ <user> %s%s%s%s method %s%s ] {\n  @@ %s %d - %d\n",
+        isset($this->info['abstract']) ? 'abstract ' : '',
+        isset($this->info['final']) ? 'final ' : '', 
+        isset($this->info['static']) ? 'static ' : '',
+        $this->info['access'],
+        $ref,
+        $this->name,
+        $this->info['file'],
+        $this->info['line1'],
+        $this->info['line2']
+      );
+    }
+
+    // Parameters
+    if (!empty($this->info['params'])) {
+      $ret .= "\n  - Parameters [".count($this->info['params'])."] {\n";
+      foreach ($this->getParameters() as $_) {
+        $ret .= "    $_\n";
+      }
+      $ret .= "  }\n";
+    }
+
+    return $ret."}\n";
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -2560,10 +2912,23 @@ public function getPrototype() {
    * Warning: This function is currently not documented; only its argument
    * list is available.
    *
+   * @object     object  Forbidden for static methods, required for other methods
+   *
    * @return     mixed   Returns Closure. Returns NULL in case of an error.
    */
-  public function getClosure() {
-    return $this->info['closure'];
+  public function getClosure($object= null) {
+    if ($this->isStatic()) {
+      return function() {
+        return $this->invokeArgs(null, func_get_args());
+      };
+    } else {
+      if (!($object instanceof $this->info['class'])) {
+        throw new ReflectionException('Given object is not an instance of the class this method was declared in');
+      }
+      return function() use($object) {
+        return $this->invokeArgs($object, func_get_args());
+      };
+    } 
   }
 
   // This doc comment block generated by idl/sysdoc.php
@@ -2824,4 +3189,9 @@ public function getClassNames() {
   public function info() {
     return $this->info['info'];
   }
+
+  // Prevent cloning
+  public function __clone() {
+    throw new BadMethodCallException('Trying to clone an uncloneable object of class ReflectionExtension');
+  }
 }
diff --git a/hphp/runtime/ext/reflection/ext_reflection.cpp b/hphp/runtime/ext/reflection/ext_reflection.cpp
index 737f02a..2d709ba 100644
--- a/hphp/runtime/ext/reflection/ext_reflection.cpp
+++ b/hphp/runtime/ext/reflection/ext_reflection.cpp
@@ -475,9 +475,13 @@ static void set_function_info(Array &ret, const Func* func) {
           // undefined class constants can cause the eval() to
           // fatal. Zend lets such fatals propagate, so don't bother catching
           // exceptions here.
+          //
+          // Pass empty namespace, fpi.phpCode() will already contain resolved
+          // fully qualified class names for constants such as `self::CONSTANT`
+          // or `ClassName::CONSTANT`.
           CVarRef v = g_vmContext->getEvaledArg(
             fpi.phpCode(),
-            func->cls() ? func->cls()->nameRef() : func->nameRef()
+            empty_string
           );
           param.set(s_default, v);
         }
@@ -531,7 +535,7 @@ static void set_function_info(Array &ret, const Func* func) {
     const Func::SVInfoVec& staticVars = func->staticVars();
     for (unsigned int i = 0; i < staticVars.size(); i++) {
       const Func::SVInfo &sv = staticVars[i];
-      arr.set(VarNR(sv.name), VarNR(sv.phpCode));
+      arr.set(VarNR(sv.name), g_vmContext->getEvaledArg(sv.phpCode, empty_string)); 
     }
     ret.set(s_static_variables, VarNR(arr));
   }
diff --git a/hphp/test/quick/reflection.php.expectf b/hphp/test/quick/reflection.php.expectf
index 6de5112..42ada44 100644
--- a/hphp/test/quick/reflection.php.expectf
+++ b/hphp/test/quick/reflection.php.expectf
@@ -138,9 +138,9 @@ array(4) {
 --- getStaticVariables("f") ---
 array(2) {
   ["staticX"]=>
-  string(1) "4"
+  int(4)
   ["staticY"]=>
-  string(4) "null"
+  NULL
 }
 
 --- isInternal("f") ---
@@ -153,7 +153,24 @@ bool(true)
 bool(true)
 
 --- export("f") ---
-string(0) ""
+string(%d) "/**
+ * This is f's doc comment.
+ */
+Function [ <user> function &f ] {
+  @@ %s/reflection.php 13 - 20
+
+  - Parameters [4] {
+    Parameter #0 [ <required> $a ]
+    Parameter #1 [ <required> &$b ]
+    Parameter #2 [ <optional> $c = NULL ]
+    Parameter #3 [ <optional> $d = array (
+  0 => 1,
+  1 => 2,
+  2 => 'some string',
+) ]
+  }
+}
+"
 
 --- invokeArgs("f") ---
 In f()
@@ -168,10 +185,77 @@ In g(a, b, some string)
 NULL
 
 --- export("g") ---
-string(0) ""
+string(%d) "/**
+ * This is g's doc comment.
+ */
+Function [ <user> function g ] {
+  @@ %sreflection.php 87 - 89
+
+  - Parameters [3] {
+    Parameter #0 [ <optional> $a = NULL ]
+    Parameter #1 [ <optional> $b = array (
+  0 => 1,
+  1 => 2,
+  2 => 3,
+) ]
+    Parameter #2 [ <optional> $c = 'some string' ]
+  }
+}
+"
 
 --- export() ---
-string(0) ""
+string(%d) "Class [ <user> class B ] {
+  @@ %s/reflection.php %d-%d
+
+  - Constants [2] {
+    Constant [ string C0 ] { B::C0 }
+    Constant [ string C1 ] { B::C1 }
+  }
+
+  - Static properties [3] {
+    Property [ public static $s0 ]
+    Property [ public static $s1 ]
+    Property [ public static $s2 ]
+  }
+
+  - Static methods [2] {
+    Method [ <user> static public method smethB0 ] {
+      @@ %s/reflection.php %d - %d
+    }
+    Method [ <user> static private method smethB1 ] {
+      @@ %s/reflection.php %d - %d
+    }
+  }
+
+  - Properties [4] {
+    Property [ <default> protected $p1 ]
+    Property [ <default> public $p2 ]
+    Property [ <default> public $p3 ]
+    Property [ <default> private $p0 ]
+  }
+
+  - Methods [6] {
+    Method [ <user> public method methI ] {
+      @@ %s/reflection.php %d - %d
+    }
+    Method [ <user> public method methJ ] {
+      @@ %s/reflection.php %d - %d
+    }
+    Method [ <user> public method methK ] {
+      @@ %s/reflection.php %d - %d
+    }
+    Method [ <user> private method methB ] {
+      @@ %s/reflection.php %d - %d
+    }
+    Method [ <user> public method methH ] {
+      @@ %s/reflection.php %d - %d
+    }
+    Method [ <user> protected method methA ] {
+      @@ %s/reflection.php %d - %d
+    }
+  }
+}
+"
 
 --- getConstant() ---
 string(5) "B::C0"
@@ -227,7 +311,7 @@ int(0)
 string(1) "B"
 
 --- getParentClass() ---
-object(ReflectionClass)#23 (3) {
+object(ReflectionClass)#%d (3) {
   ["name"]=>
   string(1) "A"
   ["info":"ReflectionClass":private]=>
@@ -295,7 +379,7 @@ bool(false)
 bool(true)
 
 --- newInstance() ---
-object(B)#51 (4) {
+object(B)#%d (4) {
   ["p0":"B":private]=>
   int(1)
   ["p1":protected]=>
@@ -307,7 +391,7 @@ object(B)#51 (4) {
 }
 
 --- newInstanceArgs() ---
-object(B)#51 (4) {
+object(B)#%d (4) {
   ["p0":"B":private]=>
   int(1)
   ["p1":protected]=>
diff --git a/hphp/test/quick/reflection2.php.expectf b/hphp/test/quick/reflection2.php.expectf
index 3312fe6..0593a10 100644
--- a/hphp/test/quick/reflection2.php.expectf
+++ b/hphp/test/quick/reflection2.php.expectf
@@ -1,8 +1,6 @@
 array(6) {
   [0]=>
   object(ReflectionMethod)#2 (4) {
-    ["name"]=>
-    string(17) "my_other_override"
     ["class"]=>
     string(8) "my_child"
     ["originalClass"]=>
@@ -52,11 +50,11 @@ array(6) {
         string(17) "my_other_override"
       }
     }
+    ["name"]=>
+    string(17) "my_other_override"
   }
   [1]=>
   object(ReflectionMethod)#3 (4) {
-    ["name"]=>
-    string(15) "my_child_method"
     ["class"]=>
     string(8) "my_child"
     ["originalClass"]=>
@@ -99,11 +97,11 @@ array(6) {
       ["line2"]=>
       int(21)
     }
+    ["name"]=>
+    string(15) "my_child_method"
   }
   [2]=>
   object(ReflectionMethod)#4 (4) {
-    ["name"]=>
-    string(9) "my_method"
     ["class"]=>
     string(8) "my_class"
     ["originalClass"]=>
@@ -146,11 +144,11 @@ array(6) {
       ["line2"]=>
       int(13)
     }
+    ["name"]=>
+    string(9) "my_method"
   }
   [3]=>
   object(ReflectionMethod)#5 (4) {
-    ["name"]=>
-    string(18) "my_override_method"
     ["class"]=>
     string(8) "my_class"
     ["originalClass"]=>
@@ -200,11 +198,11 @@ array(6) {
         string(18) "my_override_method"
       }
     }
+    ["name"]=>
+    string(18) "my_override_method"
   }
   [4]=>
   object(ReflectionMethod)#6 (4) {
-    ["name"]=>
-    string(15) "my_trait_method"
     ["class"]=>
     string(8) "my_class"
     ["originalClass"]=>
@@ -247,11 +245,11 @@ array(6) {
       ["line2"]=>
       int(4)
     }
+    ["name"]=>
+    string(15) "my_trait_method"
   }
   [5]=>
   object(ReflectionMethod)#7 (4) {
-    ["name"]=>
-    string(14) "my_base_method"
     ["class"]=>
     string(7) "my_base"
     ["originalClass"]=>
@@ -294,6 +292,8 @@ array(6) {
       ["line2"]=>
       int(8)
     }
+    ["name"]=>
+    string(14) "my_base_method"
   }
 }
 object(ReflectionParameter)#9 (2) {
@@ -317,4 +317,4 @@ object(ReflectionParameter)#9 (2) {
   }
   ["name"]=>
   string(1) "c"
-}
\ No newline at end of file
+}
diff --git a/hphp/test/slow/hint/2193.php b/hphp/test/slow/hint/2193.php
index a358b93..f680b19 100644
--- a/hphp/test/slow/hint/2193.php
+++ b/hphp/test/slow/hint/2193.php
@@ -5,37 +5,36 @@ class C {
 class D {
 }
 class X {
-  public function f($x1, $x2 = null, $x3 = 123, string $x4,
-                    string $x5 = null, string $x6 = "abc",
-                    array $x7, array $x8 = null, C $x9,
-                    D $x10 = null, bool $x11, boolean $x12 = true,
-                    int $x13, integer $x14 = 73, real $x15,
-                    double $x16 = 1.5, float $x17) {
-}
+  public function f_mixed($x1, $x2 = null, $x3 = 123) { }
+  public function f_string(string $x4, string $x5 = null, string $x6 = "abc") { }
+  public function f_array(array $x7, array $x8 = null) { }
+  public function f_class(C $x9, D $x10 = null) { }
+  public function f_bool(bool $x11, boolean $x12 = true) { }
+  public function f_int(int $x13, integer $x14 = 73) { }
+  public function f_double(real $x15, double $x16 = 1.5, float $x17 = -1.5) { }
 }
 function main() {
   $rc = new ReflectionClass('X');
-  $rf = $rc->getMethod('f');
-  $params = $rf->getParameters();
-  $first = true;
-
-  $clsDecl = "class Y extends X {
-public function f(";
-  foreach ($params as $rp) {
-    if (!$first) $clsDecl .= ', ';
-    $first = false;
-    $th = $rp->getTypehintText();
-    if ($th) {
-      $clsDecl .= ($th . ' ');
-    }
-    $clsDecl .= ('$' . $rp->getName());
-    if ($rp->isDefaultValueAvailable()) {
-      $clsDecl .= (' = ' . $rp->getDefaultValueText());
+  $clsDecl = "class Y extends X {\n";
+  foreach ($rc->getMethods() as $rf) {
+    $params = $rf->getParameters();
+    $first = true;
+    $clsDecl .= '  public function '.$rf->getName().'(';
+    foreach ($params as $rp) {
+      if (!$first) $clsDecl .= ', ';
+      $first = false;
+      $th = $rp->getTypehintText();
+      if ($th) {
+        $clsDecl .= ($th . ' ');
+      }
+      $clsDecl .= ('$' . $rp->getName());
+      if ($rp->isDefaultValueAvailable()) {
+        $clsDecl .= (' = ' . $rp->getDefaultValueText());
+      }
     }
+    $clsDecl .= ") {}\n";
   }
-  $clsDecl .= ") {}
-}
-";
+  $clsDecl .= "}\n";
   echo $clsDecl;
 }
 main();
diff --git a/hphp/test/slow/hint/2193.php.expect b/hphp/test/slow/hint/2193.php.expect
index 068d287..ad06b61 100644
--- a/hphp/test/slow/hint/2193.php.expect
+++ b/hphp/test/slow/hint/2193.php.expect
@@ -1,3 +1,9 @@
 class Y extends X {
-public function f($x1, $x2 = NULL, $x3 = 123, string $x4, string $x5 = NULL, string $x6 = "abc", array $x7, array $x8 = NULL, C $x9, D $x10 = NULL, bool $x11, boolean $x12 = true, int $x13, integer $x14 = 73, real $x15, double $x16 = 1.5, float $x17) {}
+  public function f_mixed($x1, $x2 = NULL, $x3 = 123) {}
+  public function f_string(string $x4, string $x5 = NULL, string $x6 = "abc") {}
+  public function f_array(array $x7, array $x8 = NULL) {}
+  public function f_class(C $x9, D $x10 = NULL) {}
+  public function f_bool(bool $x11, boolean $x12 = true) {}
+  public function f_int(int $x13, integer $x14 = 73) {}
+  public function f_double(real $x15, double $x16 = 1.5, float $x17 = -1.5) {}
 }
diff --git a/hphp/test/slow/namespace/const_param.php.expectf b/hphp/test/slow/namespace/const_param.php.expectf
index 3c1d8d9..f908cbb 100644
--- a/hphp/test/slow/namespace/const_param.php.expectf
+++ b/hphp/test/slow/namespace/const_param.php.expectf
@@ -1,28 +1,30 @@
-string(13) "5.4.99-hiphop"
+HipHop Notice: Use of undefined constant B - assumed 'B'
+HipHop Notice: Use of undefined constant B - assumed 'B'
+string(%d) "5.%s-hiphop"
 string(11) "PHP_VERSION"
-string(1) "c"
+string(1) "B"
 string(1) "B"
 array(1) {
   [0]=>
-  string(13) "5.4.99-hiphop"
+  string(%d) "5.%s-hiphop"
 }
-string(18) "array(PHP_VERSION)"
+NULL
 array(1) {
   [0]=>
-  string(1) "c"
+  string(1) "B"
 }
-string(%d) "array%w(%a)"
-string(13) "5.4.99-hiphop"
+NULL
+string(%d) "5.%s-hiphop"
 string(11) "PHP_VERSION"
-string(1) "c"
 string(1) "B"
+string(3) "A\B"
 array(1) {
   [0]=>
-  string(13) "5.4.99-hiphop"
+  string(%d) "5.%s-hiphop"
 }
-string(18) "array(PHP_VERSION)"
+NULL
 array(1) {
   [0]=>
-  string(1) "c"
+  string(1) "B"
 }
-string(%d) "array%w(%a)"
+NULL
diff --git a/hphp/test/slow/reflection/hhas_defaults.php b/hphp/test/slow/reflection/hhas_defaults.php
index fa38c3d..b98b27a 100644
--- a/hphp/test/slow/reflection/hhas_defaults.php
+++ b/hphp/test/slow/reflection/hhas_defaults.php
@@ -1,7 +1,7 @@
 <?php
 
 function test() {
-  $x = new ReflectionFunction('array_filter');
+  $x = new ReflectionFunction(function($a, $b = null) { });
   $params = $x->getParameters();
   $p1 = $params[1];
   var_dump($p1->getDefaultValueText());
diff --git a/hphp/test/slow/reflection/hhas_defaults.php.expect b/hphp/test/slow/reflection/hhas_defaults.php.expect
index b17719c..cb63aba 100644
--- a/hphp/test/slow/reflection/hhas_defaults.php.expect
+++ b/hphp/test/slow/reflection/hhas_defaults.php.expect
@@ -1 +1 @@
-string(4) "null"
+string(4) "NULL"
